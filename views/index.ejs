<!--
    /*
 * @Author: Eduardo Policarpo
 * @contact: +55 43996611437
 * @Date: 2021-05-10 18:09:49
 * @LastEditTime: 2021-06-07 03:18:01
 */
-->
<!DOCTYPE html>
<html>

<head>
	<meta charset='utf-8'>
	<meta http-equiv='X-UA-Compatible' content='IE=edge'>
	<title>MyZAP 2.0</title>
	<link rel="stylesheet" href="/css/style.css">
	<link rel="stylesheet" href="/sweetalert2/css/sweetalert2.min.css">
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<meta name="viewport" content="width=device-width, user-scalable=no" />
	<!-- Bootstrap CSS -->
	<link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
	<link
		href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
		rel="stylesheet">
</head>

<body>
	<div class="container">
		<div class="text-center">
			<h4>MyZAP 2.0</h4>
			<!--Grid row-->
			<div class="row justify-content-center align-items-center">
				<div class="col-md-6 text-center mx-auto">
					<form class="form-horizontal">
						<div class="form-group">
							<div class="textOnInput">
								<label for="session">Session Name:</label>
								<input type="text" class="form-control" id="session" name="session"
									placeholder="Nome para identificação da sessão">
							</div>
						</div>
						<div class="form-group">
							<div class="textOnInput">
								<label for="apitoken">API Token:</label>
								<input type="text" class="form-control" id="apitoken" name="apitoken"
									placeholder="Token da API para autenticação de acesso">
							</div>
						</div>
						<div class="form-group">
							<div class="textOnInput">
								<label for="sessionkey">Session KEY:</label>
								<input type="sessionkey" class="form-control" id="sessionkey" name="sessionkey"
									placeholder="Chave de autorização para requisições na API.">
							</div>
						</div>
						<div class="form-group">
							<div class="textOnInput">
								<label for="wh_status">Webhook Send Messages:</label>
								<input type="wh_status" class="form-control" id="wh_status" name="wh_status"
									placeholder="URL que recebe o Webhooks dos status das mensagens enviadas">
							</div>
						</div>
						<div class="form-group">
							<div class="textOnInput">
								<label for="wh_message">Webhook Received Messages:</label>
								<input type="wh_message" class="form-control" id="wh_message" name="wh_message"
									placeholder="URL que recebe o Webhooks dos status das mensagens recebidas">
							</div>
						</div>
						<div class="form-group">
							<div class="textOnInput">
								<label for="wh_connect">Webhook Status Connection:</label>
								<input type="wh_connect" class="form-control" id="wh_connect" name="wh_connect"
									placeholder="URL que recebe o status da conexão">
							</div>
						</div>
						<div class="form-group">
							<div class="textOnInput">
								<label for="wh_qrcode">Webhook QRCode:</label>
								<input type="wh_qrcode" class="form-control" id="wh_qrcode" name="wh_qrcode"
									placeholder="URL que recebe o webhooks do QRCODE do cliente">
							</div>
						</div>
						<div class="form-group">
							<button type="button" class="btn btn-primary" id="send-btn" name="send-btn"
								onclick="alterSession(document.getElementById('session').value)">Iniciar</button>
						</div>
					</form>
				</div>
				<div class="col-md-6 text-center mx-auto">
					<img class="img-fluid" id="image" src="/imagens/readqrcode.jpg" draggable="false" alt="qr-code">
				</div>
			</div>
		</div>
	</div>
	</div>
	<!-- jQuery primeiro, depois Popper.js, depois Bootstrap JS -->
	<script src="/jquery/jquery-3.6.0.min.js"></script>
	<script src="/bootstrap/js/bootstrap.bundle.min.js"></script>
	<script src="/bootstrap/js/bootstrap.min.js"></script>
	<!-- JavaScript (Opcional) -->
	<script src="/sweetalert2/js/sweetalert2.min.js"></script>
	<script src="/axios/axios.min.js"></script>
	<script src="/socket/socket.io.js"></script>
	<script>

		let url;
		let host = '<%=host %>'
		let host_ssl = '<%=host_ssl %>'
		let port = '<%=port %>'
		url = host_ssl == '' ? `http://${host}:${port}` : `https://${host_ssl}`

		async function getSession(session) {
			const config = {
				headers: {
					apitoken: document.getElementById("apitoken").value,
					sessionkey: document.getElementById("sessionkey").value
				}
			}

			const data = {
				session: document.getElementById("session").value,
				wh_status: document.getElementById("wh_status").value,
				wh_message: document.getElementById("wh_message").value,
				wh_qrcode: document.getElementById("wh_qrcode").value,
				wh_connect: document.getElementById("wh_connect").value,
			}
			//
			axios.post(url + "/start", data, config)
				.then((value) => {
					//alert(value);
				}).catch((err) => {
					//alert(err);
				});
		}
		async function alterSession(session) {
			document.getElementById('send-btn').disabled = false;
			document.getElementById('image').src = "imagens/loading.gif";
			if (!session) {
				document.getElementById('send-btn').disabled = false;
				document.getElementById('image').src = "/imagens/readqrcode.jpg";
				Swal.fire({
					icon: 'error',
					title: 'Oops...',
					text: 'Digite o nome da sessão antes de continuar...'
				});
			} else
				if (!document.getElementById('apitoken').value) {
					document.getElementById('send-btn').disabled = false;
					document.getElementById('image').src = "/imagens/readqrcode.jpg";
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Digite o TOKEN da API antes de continuar...'
					});
				} else
					if (!document.getElementById('sessionkey').value) {
						document.getElementById('send-btn').disabled = false;
						document.getElementById('image').src = "/imagens/readqrcode.jpg";
						Swal.fire({
							icon: 'error',
							title: 'Oops...',
							text: 'Digite a SESSION KEY da sessão antes de continuar...'
						});
					}
					else {
						document.getElementById('image').style.visibility = "visible";
						document.getElementById('send-btn').disabled = true;
						await getSession(session);
					}
		}
		const socket = io(url + '/', { transports: ['websocket'] });
		socket.on('msg', (msg) => {
			if (msg) {
				document.getElementById('image').style.visibility = "hidden";
				document.getElementById('send-btn').disabled = false;
				document.getElementById('image').src = "/imagens/readqrcode.jpg";
				// alert(msg.reason);
				Swal.fire(msg.reason);
			}
		});
		socket.on('qrCode', (qrCode) => {
			let session = document.getElementById('session').value;
			if (session === qrCode.session) {
				document.getElementById('image').src = qrCode.data;
			}
		});
		socket.on('whatsapp-status', (status) => {
			if (status) {
				Swal.fire({
					icon: 'success',
					title: 'Sucesso',
					text: 'Whatsapp Aberto com sucesso'
				});
				document.getElementById('send-btn').disabled = false;
				document.getElementById('image').src = "/imagens/ok.jpg";
			} else {
				document.getElementById('send-btn').disabled = false;
				document.getElementById('image').src = "/imagens/error.jpg";
			}
		});
	</script>
</body>

</html>